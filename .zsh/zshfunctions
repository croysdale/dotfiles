# Create a /overview/ of all available function()'s; the description for
# each funtion() *must* be the first line above the string `function'!
# Otherwise it wont work.

# Display all function()'s with her descriptions
function funlist() {

    for file in $HOME/.zsh/zshfunctions $HOME/.zsh/zshlocal $HOME/.zsh/zshaliases  ; do 
        echo -e "\033[1;35m $file\033[0m"
        grep -B 1 "^function" $file | \
	grep -v "^\-\-$" | \
        awk '{ if(/^#/) { gsub(/^#[:space:]*/, ""); ht=$0 }; getline; gsub(/ ?\(\)/, ":"); printf(" %-20s %s\n", $2, ht); }' | \
	sort -u -k 3
    done


    echo "Use this to get body of function\n"
    echo "whence -f <function>"
}

# precmd to keep persistent shell history
export ZSH_LOGS=${HOME}/.zsh_logs
mkdir -p ${ZSH_LOGS}

# Precmd for keeping $HOME/.zsh_logs
function precmd() {
    if [ "$(id -u)" -ne 0 ]; then
        #  TODO  : Don't copy lines that start with space to history
        #          Can this be done?
        hist=`\history -1` 

        if [[ -z "$TMUX_PANE" ]]; then
            TMUX_WIN_PANE="Not in tmux"
        else
            if [[ ! -z "$TMUX_WIN_PANE" ]]; then
                TMUX_WIN_PANE=$(tmux display-message -p '#S-#W')
            fi
        fi
        FULL_CMD_LOG="$ZSH_LOGS/zsh-history-$(date "+%Y-%m-%d").log"
        echo "$(date) `hostname` : ${TMUX_WIN_PANE} `pwd` $hist" >>! ${FULL_CMD_LOG}
    fi
## Needed for kevin3 theme to clear "CMD" on right. 
## Should try to pend to existing precmd
    RPROMPT=""
}

# Remove string from path
function path_remove  { eval $(${HOME}/bin/PATH -remove $1)  }
# Prepend string to path
function path_prepend { eval $(${HOME}/bin/PATH -prepend $1) }
# Append string to path
function path_append  { eval $(${HOME}/bin/PATH -append $1)  }
# Remove invalid and duplicate entries from path
function path_fix     { eval $(${HOME}/bin/PATH -fix )  }

function manpath_remove  { eval $(${HOME}/bin/MANPATH -remove $1)  }
function manpath_prepend { eval $(${HOME}/bin/MANPATH -prepend $1) }
function manpath_append  { eval $(${HOME}/bin/MANPATH -append $1)  }
function manpath_fix     { eval $(${HOME}/bin/MANPATH -append $1)  }

# Capture entire tmux pane to a variable to use for command completion
function _tmux_pane_words() {
  local expl
  local -a w
  if [[ -z "$TMUX_PANE" ]]; then
    _message "not running inside tmux!"
    return 1
  fi
  w=( ${(u)=$(tmux capture-pane \; show-buffer \; delete-buffer)} )
    _message "running"
  _wanted values expl 'words from current tmux pane' compadd -a w
}

# grep(1)'ing $HISTFILE
# histgrep () { fc -fl -m "*(#i)$1*" 1 | grep -i --color $1 }

# Interactive perl interpreter
# iperl () { perl -ne 'BEGIN { print ">> " }; print eval "$_"; print "\n>> "' }

# other version for "ls"
# zls () {
#   zmodload zsh/stat
#   local -a st
#   local name dev inode mode nlink uid gid rdev
#   local size atmim mtime ctme blksize blocks link
#   [[ $# -eq 0 ]] && set -- *
#   zstat -nsLA st "$@"
#   for name dev inode mode nlink uid gid rdev size atmim mtime ctme blksize blocks link in "$st[@]"
#   do print -r -- "$mode $nlink ${(r:8:)uid} ${(r:8:)gid} ${(l:9:)size} $name"
#   done
# }

function sp {
    which -am \*$1\*
}

# Create a directory like "year-month-day" (i. e. 2007-07-16)
function mdate()
{
	mkdir `date +%F`
	cd `date +%F`
}

# PROG: Search for the argument in the system libraries
function lcheck() { nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1"":[[:xdigit:]]\{8\} . .*$1" }

# PERL: List all locations of perl libraries
function showINC () { perl -e 'for (@INC) { printf "%d %s\n", $i++, $_ }' }

# HELP: /Quick read/ help-files of Vim
function vimhelp () { vim -c "help $1" -c on -c "au! VimEnter *" }

# DIFF: create a diff (-udrP)
function mdiff() { diff -udrP "$1" "$2" > diff.`date "+%Y-%m-%d"`."$1" }


# MISC: mkdir && cd
function mcd()
{
	test -z "$1" && echo mkcd: no path given && return
	test -d "$1" && print "mkcd: Directory $1 already exists"
	mkdir -p -- "$1"
	cd -- "$1"
}

# SEARCH: A /replacement/ for `ls -l =command'
function pls() { ls -l =$1 }

# MISC: cd && ls
function cl() { cd $1 && ls -a }

# MISC: Use vim to convert plaintext to HTML
function 2html() { vim -u NONE -n -c ':syntax on' -c ':so $VIMRUNTIME/syntax/2html.vim' -c ':wqa' $1 > /dev/null 2> /dev/null }

# Display all combinations of colors
function _cols()
{
        esc="\033["
        echo -e "\t 40\t 41\t 42\t 43\t 44\t 45\t 46\t 47"
        for fore in 30 31 32 33 34 35 36 37; do
                line1="$fore  "
                line2="    "
                for back in 40 41 42 43 44 45 46 47; do
                        line1="${line1}${esc}${back};${fore}m Normal  ${esc}0m"
                        line2="${line2}${esc}${back};${fore};1m Bold    ${esc}0m"
                done
                echo -e "$line1\n$line2"
        done
}

if [ ! -x $(which unp) >/dev/null 2>&1 ]; then
# ARCHIVE: extracts archived files (maybe)
function simple-extract ()
{
        if [[ -f "$1" ]]
        then
                case "$1" in
                        *.tar.bz2)  bzip2 -v -d "$1" ;;
                        *.tar.gz)   tar -xvzf "$1"   ;;
                        *.ace)      unace e "$1"     ;;
                        *.rar)      unrar x "$1"     ;;
                        *.deb)      ar -x "$1"       ;;
                        *.bz2)      bzip2 -d "$1"    ;;
                        *.lzh)      lha x "$1"       ;;
                        *.gz)       gunzip -d "$1"   ;;
                        *.tar)      tar -xvf "$1"    ;;
                        *.tgz)      gunzip -d "$1"   ;;
                        *.tbz2)     tar -jxvf "$1"   ;;
                        *.zip)      unzip "$1"       ;;
                        *.Z)        uncompress "$1"  ;;
                        *.shar)     sh "$1"          ;;
                        *)          echo "'"$1"' Error. Please go away" ;;
                esac
        else
                echo "'"$1"' is not a valid file"
        fi
}
fi

# grep(1)'ing $HISTFILE
histgrep () { fc -fl -m "*(#i)$1*" 1 | grep -i --color $1 }

# Interactive perl interpreter
iperl () { perl -ne 'BEGIN { print ">> " }; print eval "$_"; print "\n>> "' }

function colorscheme() { 
    source ${HOME}/.colorschemes/$1
}

# SEARCH: Show the path from a symlink to its ultimate source.
function folsym() {
if [[ -e $1 || -h $1 ]]; then
	file=$1
else
	file=`which $1`
fi
if
	if [[ -e $file || -L $file ]]; then
		if [[ -L $file ]]; then
			echo `ls -ld $file | perl -ane 'print $F[7]'` '->'
			folsym `perl -le '$file = $ARGV[0];
			$dest = readlink $file;
			if ($dest !~ m{^/}) {
				$file =~ s{(/?)[^/]*$}{$1$dest};
			} else {
			$file = $dest;
		}
		$file =~ s{/{2,}}{/}g;
		while ($file =~ s{[^/]+/\.\./}{}) {
			;
		}
		$file =~ s{^(/\.\.)+}{};
		print $file' $file`
	else
		ls -d $file
	fi
else
	echo $file
fi
}

# SEARCH: search for README file in dir and display them 
function readme()
{
	local files
        files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
	if (($#files))
	then
		$PAGER $files
	else
		print 'No README files. Please lart \$MAINTAINER!'
	fi
}

# SYS: csh compatibility
function setenv() { typeset -x "${1}${1:+=}${(@)argv[2,$#]}" }

# SYS: Reload functions.
function refunc()
{
        for func in $argv
        do
                unfunction $func
                autoload $func
        done
}

# Find (and print) all symbolic links without a target within the
# current directorytree (i. e. ll symlinks that dont point to files,
# directories, sockets, devices, or named pipes).
# Note: all three functions works but the last is nicer
# function brlinks() { for i in **/*(D@); [[ -f $i || -d $i ]] || echo $i }
# function brlinks() { print -l **/*(@-^./=%p) }
# SYS: Display all broken symlinks
function brlinks() { print -l **/*(-@) }

man() {
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    /bin/man "$@"
}

## Potentional fix for zsh hanging on directory complete
## ls /u/<TAB> will hang the shell with Ctrl-C provided this message:
#     Killed by signal in  after 95s
# http://superuser.com/questions/585545/how-to-disable-zsh-tab-completion-for-nfs-dirs
# function restricted-expand-or-complete() {
#
#    # split into shell words also at "=", if IFS is unset use the default (blank, \t, \n, \0)
#    local IFS="${IFS:- \n\t\0}="
#
#    # this word is completed
#    local complt
#
#    # if the cursor is following a blank, you are completing in CWD
#    # the condition would be much nicer, if it's based on IFS
#    if [[ $LBUFFER[-1] = " " || $LBUFFER[-1] = "=" ]]; then
#       complt="$PWD"
#    else
#       # otherwise take the last word of LBUFFER
#       complt=${${=LBUFFER}[-1]}
#    fi
#
#    # determine the physical path, if $complt is not an option (i.e. beginning with "-")
#    [[ $complt[1] = "-" ]] || complt=${complt:A}/
#
#    # activate completion only if the file is on a local filesystem, otherwise produce a beep
#    if [[ ! $complt = /u/* && ! $complt = /another/nfs-mount/* ]]; then    
#       zle expand-or-complete
#    else    
#       echo -en "\007"
#    fi
# }
# zle -N restricted-expand-or-complete
# bindkey "^I" restricted-expand-or-complete

function ff() {
    find . -readable -type f -iname "*$1*" 2> /dev/null
}

function ffbig() {
    find . -readable -type f -size +100M -iname "*$1*" -exec du -sh {} \; 2> /dev/null
}

function ffl() {
    find . -readable -type f -iname "*$1*" -exec ls -l {} \; 2> /dev/null
}
