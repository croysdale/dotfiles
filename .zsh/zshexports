# (( ${+*} )) = if variable is set don't set it anymore
#  Note: Do *not* use '$PORTSDIR'! This variable is defined in 
#        '/path/to/ports/Makefile'.
(( ${+VISUAL} )) || export VISUAL="vim"                             # **EDIT**
## 2016/07/17 17:17 KWC Fixes fzf
(( ${+TERM} )) || export TERM=xterm-256color
#export TERM=xterm-256color
#
# 2024-03-18 11:20 Causes command to get repeated
# # If you are using the zsh #  shell
#  and the TERM environment variable is set to screen-256color, you 
#  may see the command you just issued repeated in the output. This is because zsh is trying to set the terminal title to the currently running command. However, some terminals
#  do not support this feature, so the command is printed instead.
#   There are a few ways to fix this issue:
#    Set the TERM environment variable to a different value, such as xterm-256color.
# setopt no_verbose
# export TERM=screen-256color
(( ${+LESSCHARSET} )) || export LESSCHARSET=utf-8
export SHELL=zsh

#--------------------------------------------------
# # Initialisation for new style completion.
# if [[ $ZSH_VERSION  > '4.2' ]]; then
# 	autoload -U compinit
# 	compinit
# else
# 	print "Advanced completion system not found; ignoring zstyle settings."
# 	function zstyle { }
# fi
# 
#-------------------------------------------------- 


# The format of login / logout reports if the watch parameter is set.
# Default is `%n has %a %l from %m'.
# Recognizes the following escape sequences:
#   %n = name of the user that logged in/out.
#   %a = observed action, i.e. "logged on" or "logged off".
#   %l = line (tty) the user is logged in on.
#   %M = full hostname of the remote host.
#   %m = hostname up to the first `.'.
#   %t or %@ = time, in 12-hour, am/pm format.
#   %w = date in `day-dd' format.
#   %W = date in `mm/dd/yy' format.
#   %D = date in `yy-mm-dd' format.
# WATCHFMT='%n %a %l from %m at %t.'
# WATCHFMT='*knock* *knock* Follow the white rabbit => %n %a %l from %m at %t.'
# WATCHFTM=print '\e[1;35m%B[%b\e[1;32m%B%n%b\e[1;35m%B]%b \e[1;34m%U%a%u \e[1;35mfrom terminal \e[1;31m%M \e[1;35mat \e[1;33m%U%T%u\e[0m''
#WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"
# WATCHFMT="%B->%b %n has just %a %(l:tty%l:%U-Ghost-%u)%(m: from %m:)"

# If this parameter is nonzero, the shell will receive an ALRM signal if a
# command is not entered within the specified number of seconds after issuing a
# prompt. If there is a trap on SIGALRM, it will be executed and a new alarm is
# scheduled using the value of the TMOUT parameter after executing the trap. 
#TMOUT=1800

# format of process time reports with 'time'
#  %%     A `%'.
#  %U     CPU seconds spent in user mode.
#  %S     CPU seconds spent in kernel mode.
#  %E     Elapsed time in seconds.
#  %P     The CPU percentage, computed as  (%U+%S)/%E.
#  %J     The name of this job.
# Default is: 
#       %E real  %U user  %S system   %P  %J
TIMEFMT="\
    The name of this job.             : %J
    CPU seconds spent in user mode.   : %U
    CPU seconds spent in kernel mode. : %S
    Elapsed time in seconds.          : %E
    The  CPU percentage.              : %P"

#--------------------------------------------------
# TIMEFMT="Real: %E User: %U System: %S Percent: %P Cmd: %J"
#-------------------------------------------------- 

# The maximum number of events stored in the internal history list. If you use
# the HIST_EXPIRE_DUPS_FIRST option, setting this value larger than the
# SAVEHIST size will give you the difference as a cushion for saving
# duplicated history events.
HISTSIZE=100000

# Stop annoying MailChecks. 
unset MAILCHECK

# The name of the file used to store command history. When assigned to, history
# is loaded from the specified file. Also, several invocations of the shell
# running on the same machine will share history if their HISTFILE parameters
# all point to the same file.
# i have finally discovered the difference between `SAVEHIST' and `HISTSIZE'
# thanks to the FAQ. `HISTSIZE' is the number of lines of history that is
# kept within any given, running zsh. `SAVEHIST' is the number of lines of
# history that is written out to a file at the magic, mysterious moment 
# when that event occurs. so cat-ing `HISTFILE' into wc -l should enumerate
# the number of history events 
if (( ! EUID )); then
  HISTFILE=~/.root_histfile
else
  HISTFILE=~/.zsh_history
fi

SAVEHIST=65536
DIRSTACKSIZE=20

#DIRSTACKFILE="$HOME/.cache/zsh/dirs"

# If nonnegative, commands whose combined user and system execution
# times (measured in seconds) are greater than this value have timing
# statistics printed for them.
REPORTTIME=300

# Limit this "zsh: do you wish to see all NNN possibilities (NNN
# lines)?" downward (default is 100). Only ask before displaying
# completions if doing so would scroll.
LISTMAX=0

# Seconds for login / logout check
LOGCHECK=20

NAME=`/bin/uname -n`
OS=`/bin/uname -s`
OS_VER=`/bin/uname -r`




# Check some directories and add existing to $PATH
  for dir in \
    ~/bin  \
    /usr/local/bin \
    /bin \
    /usr/bin \
    ${HOME}/bin \
    .
  do
          [ -d "${dir}" ] && PATH="${PATH}:${dir}"
  done

eval `dircolors --sh ~/.dir_colors.256`

# if your compdef Dir is ~/.zsh
if [ -d "${HOME}/.zsh/func" ]; then
	fpath=( $fpath ~/.zsh/func )
	autoload -U ~/.zsh/func/*(:t)
fi

for mdir in \
        /usr/local/man \
        /usr/man \
        /usr/X11/man \
        /usr/X11R6/man 
do
        [ -d "${mdir}" ] && MANPATH="${MANPATH}:${mdir}"
done

# automatically remove duplicates from these arrays
typeset -gU path cdpath manpath fpath 

# Set the values for some environment variables:
export HOSTNAME="`hostname`"
# Some (useful) options for less
if [[ -x `which less` ]] ; then
  export PAGER="less"
  export PERLDOC_PAGER="less -+C -E"
  export LESS="-R -C -i -j4 -M -PM?m(%i/%m) .?f%f:Standard input.\: ?bb%bb?B/%B. Bytes.?pb (%pb\%).?lb, Line\: %lb?e ?x(-> %x):(EOF).%t"
  # export LESS='-rX~deMwPM?f%f ?e[EOF] ?lt[Line\: %lb].:?lt[Line\: %lt]. ?pt%pt\%...'
  export LESSBINFMT='*u[%X]'
  if [[ $terminfo[colors] -ge 8 ]] ; then
      export LESS_TERMCAP_mb=$'\E[01;31m'
  export LESS_TERMCAP_md=$'\E[01;31m'
  export LESS_TERMCAP_me=$'\E[0m'
      export LESS_TERMCAP_se=$'\E[0m'
      export LESS_TERMCAP_so=$'\E[34m'
      export LESS_TERMCAP_ue=$'\E[0m'
      export LESS_TERMCAP_us=$'\E[01;32m'
  fi
else
  export PAGER="more"
fi

# Warn on lack of 256 color support from termcap/info.
(test -n "$(tput Co 2>/dev/null)" \
	&& test "$(tput Co 2>/dev/null)" -eq 256) \
	|| (test -n "$(tput colors 2>/dev/null)" \
	&& test "$(tput colors 2>/dev/null)" -eq 256) \
	|| echo "WARNING: 256 color terminal not set correctly!"

# Some settings for the manpages
# set the width to 80. Its enough
export MANWIDTH=80

export EDITOR=vim
export VISUAL="${EDITOR}"
#export VIMRELEASE="`print ${${$(vim --version)[5]}:gs/.//}`"
#
# Control the max age for z.lua
# https://github.com/skywind3000/z.lua
export _ZL_MAXAGE=50000

## Executed whenever a command has a non-zero exit status:
## ------------------------------------------------- 
# if fortune bofh-excuses > /dev/null 2>&1 ;then
# 	TRAPZERR() { fortune bofh-excuses | tail -n 1 }
# else
# 	TRAPZERR() { echo 'Command failed!!'; }
# fi

#--------------------------------------------------
# The prompt used for spelling correction. The sequence `%R' expands to
# the string which presumably needs spelling correction, and `%r' expands
# to the proposed correction. All other prompt escapes are also allowed.
# SPROMPT=$'%BError!%b Correct %{\e[31m%}%R%{ \e[0m%}to%{ \e[36m%}%r%{ \e[0m%}? [No/Yes/Abort/Edit]: '

## Solarized colors for Perl ANSI::Color
export ANSI_COLORS_ALIASES='\
            base00=bright_yellow, on_base00=on_bright_yellow,\
            base01=bright_green,  on_base01=on_bright_green, \
            base02=black,         on_base02=on_black,        \
            base03=bright_black,  on_base03=on_bright_black, \
            base0=bright_blue,    on_base0=on_bright_blue,   \
            base1=bright_cyan,    on_base1=on_bright_cyan,   \
            base2=white,          on_base2=on_white,         \
            base3=bright_white,   on_base3=on_bright_white,  \
            orange=bright_red,    on_orange=on_bright_red,   \
            violet=bright_magenta,on_violet=on_bright_magenta'
