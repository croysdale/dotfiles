# Tmux Header {{
# vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={{,}} foldlevel=0 foldmethod=marker spell:
# }}

## Resources {{
## https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/

## }}

# General options {{
#run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6- | sed -e 's/a//')"
setenv -g TMUX_VERSION 2.5
 

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# refresh 'status-left' and 'status-right' more often
set -g status-interval 120

# focus events enabled for terminals that support them
set -g focus-events on

# Map prefix to control-space
set-option -g prefix C-@

setw -g automatic-rename off


## Prevent tmux from locking up due to lots of text output

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
 "setw -g c0-change-trigger 10; \
 setw -g c0-change-interval 250; \
 setw -g utf8 on; \
 setw -g status-utf8 on"

## set -g automatic-rename-format

# Default termtype. If the rcfile sets $TERM, that overrides this value.
# 2016/07/12 10:54 Changed to screen-256color to fix fzf
# https://github.com/junegunn/fzf/issues/18
set -g default-terminal screen-256color
#set -g default-terminal xterm-256color

# Ring the bell if any background window rang a bell
set -g bell-action any

# When a window is closed, renumber the other windows in numerical order
set -g renumber-windows on

# Allows for faster key repetition
set -sg escape-time 50

# scrollback size
set -g history-limit 10000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
# TODO : Breaks Meta key for zsh. Needed for vim??
set -g xterm-keys on

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize off

bind i setw monitor-content "icc_shell>"
bind C-a setw monitor-activity on
bind C-s setw monitor-silence 30
unbind c-q
unbind space
bind C-q setw monitor-activity off \; setw monitor-silence 0 

set -g default-shell /usr/bin/zsh

# Append gvim_server to list of variables to update
set-option -ga update-environment ' PWD gvim_server'

set -g visual-silence on
set -g visual-activity on

set -g word-separators " :"

#  tmux allows a command to be bound to most keys, with or without a prefix
#     key.  When specifying keys, most represent themselves (for example `A' to
#     `Z').  Ctrl keys may be prefixed with `C-' or `^', and Alt (meta) with
#     `M-'.  In addition, the following special key names are accepted: Up,
#     Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 to
#     F20, Home, IC (Insert), NPage/PageDown/PgDn, PPage/PageUp/PgUp, Space,
#     and Tab.  Note that to bind the `"' or `'' keys, quotation marks are
#     necessary, for example:
##

#}}

# Key bindings {{

unbind -n C-t
unbind C-t
unbind C-b

#bind-key C-@ last-window
bind-key \; last-window

bind-key -n M-\; last-window
bind-key -n M-` last-window

bind-key . command-prompt "swap-window -t '%%'"


## Do not detach tmux with d
unbind d
## Confirm before detach tmux
bind-key d confirm-before -p "detach tmux? (y/n)" detach-client


# Open new windows will use current working directory
bind-key S-c new-window -c "#{pane_current_path}"
bind-key c 'new-window -a -c "#{pane_current_path}"'

# reload tmux config
unbind r
bind r \
    source-file ~/.tmux.conf \;\
    display 'Reloaded tmux config.'

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys emacs
set-option -gw mode-keys vi

# Use vi keybindings in copy and choice modes
#setw -g mode-keys vi

#}}

# Scrollback / pastebuffer {{
#
unbind C-c
unbind C-v
unbind v
unbind -n v
#unbind C-d
#unbind C-f

bind -n C-v  send C-v 
unbind -n v

## TODO Look into xclip -o -selection XA_SECONDARY 2024-10-02 18:58 
bind v      run "tmux set-buffer -- \"$(xclip -o )\"; tmux paste-buffer"
bind -n M-v run "tmux set-buffer -- \"$(xclip -o )\"; tmux paste-buffer"

# Can I bind Ctrl-Shift-V 
#bind -n CS-V run "tmux set-buffer -- \"$(xclip -o )\"; tmux paste-buffer"

# Fix middle-mouse paste when mouse support is on
bind-key    -T root         MouseDown2Pane       run "tmux set-buffer -- \"$(xclip -o )\"; tmux paste-buffer"

# Enable / disable mouse support in Tmux
bind M set-option -g mouse on
bind m set-option -g mouse off


# Vim-style copy/paste
unbind [
# bind-key y copy-mode
bind-key C-@ copy-mode
bind-key C-b copy-mode
unbind p
bind p paste-buffer

bind y setw synchronize-panes on
bind Y setw synchronize-panes off

## TODO : 2020-04-21 10:35 validate if this still works after code clean-up
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle 
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

## Conflict with copycat plugin
# bind -t vi-copy Escape cancel

# Makes Shift-PageUp/Down work
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set-option -ga terminal-overrides ',XXX:Tc'

## Requires newer tmux
#set-option -sa terminal-features ',XXX:RGB'

# Toggle mouse on
# bind m \
#     set -g mode-mouse on \;\
#     set -g mouse-resize-pane on \;\
#     set -g mouse-select-pane on \;\
#     set -g mouse-select-window on \;\
#     display 'Mouse: ON'

# Toggle mouse off
bind M \
    set -g mode-mouse off \;\
    set -g mouse-resize-pane off \;\
    set -g mouse-select-pane off \;\
    set -g mouse-select-window off \;\
    display 'Mouse: OFF'
#}}

# Pane splitting {{

# Horizontal splits with s or C-S
unbind s
#unbind C-S
bind-key s split-window -c "#{pane_current_path}"
bind-key S split-window -h -c "#{pane_current_path}"

# Do not Vertical split with v or C-V. Better to use for paste
bind-key | split-window -h -c "#{pane_current_path}"
#}}

# Window navigation {{

bind-key -n M-1       select-window -t :1
bind-key -n M-2       select-window -t :2
bind-key -n M-3       select-window -t :3
bind-key -n M-4       select-window -t :4
bind-key -n M-5       select-window -t :5
bind-key -n M-6       select-window -t :6
bind-key -n M-7       select-window -t :7
bind-key -n M-8       select-window -t :8
bind-key -n M-9       select-window -t :9
# }}

# Client navigation {{
# Jump to a different tmux client (normally on a different desktop)
# bind-key -n 'M-!'       switch-client -t 1
# bind-key -n 'M-@'       switch-client -t 2
# bind-key -n 'M-#'       switch-client -t 3
# bind-key -n 'M-$'       switch-client -t 4
# bind-key -n 'M-%'       switch-client -t 5
# bind-key -n 'M-^'       switch-client -t 6
# bind-key -n 'M-&'       switch-client -t 7
# bind-key -n 'M-*'       switch-client -t 8
# bind-key -n 'M-('       switch-client -t 9

unbind-key -n (
unbind-key -n )

# }}

# Pane navigation {{

unbind k
unbind j
bind k select-pane -U
bind j select-pane -D
bind h select-pane -L
bind l select-pane -R
bind C-k select-pane -U
bind C-j select-pane -D
bind C-h previous-window
bind C-l next-window

## Shift arrows to navigate between windows/panes
unbind -n S-Left 
unbind -n S-Right
unbind -n S-Up
unbind -n S-Down
bind-key -n S-Up      select-pane   -U
bind-key -n S-Down    select-pane   -D
bind-key -n S-Left    previous-window
bind-key -n S-Right   next-window

## <ctrl>space p/n to navigate
# bind-key p            previous-window
unbind-key p
# bind-key n            next-window
unbind-key n

## <ctrl>space <ctrl>Arrow to resize pane
bind-key -N "Grow the pane upwards.      Can repeat" -n C-Up      resize-pane   -U
bind-key -N "Grow the pane downwards.    Can repeat" -n C-Down    resize-pane   -D
bind-key -N "Grow the pane to the left.  Can repeat" -n C-Right   resize-pane   -R
bind-key -N "Grow the pane to the right. Can repeat" -n C-Left    resize-pane   -L

## <Alt>Z or <Alt>Enter <Alt>Space <Ctrl>Z to Zoom pane
bind-key -N "Zoom the current pane to fill window" -n M-z       resize-pane   -Z
bind-key -N "Zoom the current pane to fill window" -n M-Enter   resize-pane   -Z
bind-key -N "Zoom the current pane to fill window" C-z          resize-pane   -Z

## <Ctrl>space = or | to size panes equally
bind-key -N "Select an even vertical   layout" -n M-= select-layout even-vertical
bind-key -N "Select an even vertical   layout" = select-layout even-vertical
bind-key -N "Select an even horizontal layout" | select-layout even-horizontal

# Move a pane from another window
bind-key -N "Prompt to move(join)  pane to specific window" M-j command-prompt -p "join pane from (window.pane):"  "join-pane -s '%%'"

# Move a pane to another window
bind-key -N "Prompt to move(split) pane to specific window" M-s command-prompt -p "send pane to   (window.pane):"  "join-pane -t '%%'"

## TODO 2021-03-08 09:25 : Test this
## https://www.bugsnag.com/blog/tmux-and-vim

unbind-key -n 'C-h' 
unbind-key -n 'C-j' 
unbind-key -n 'C-k' 
unbind-key -n 'C-l' 

# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

#bind-key -N "Select pane to left"     h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -N "Select pane below"      j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -N "Select pane above"      k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
#bind-key -N "select pan to right"     l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -N "Select pane to left"    -n M-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -N "Select pane below"      -n M-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -N "Select pane above"      -n M-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -N "select pan to right"    -n M-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -N "Select pane to left"    -n M-Left  if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -N "Select pane below"      -n M-Up    if-shell "$is_vim" 'send-keys C-j'  'select-pane -U'
bind-key -N "Select pane above"      -n M-Down  if-shell "$is_vim" 'send-keys C-k'  'select-pane -D'
bind-key -N "select pan to right"    -n M-Right if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

## <ctrl>space p/n to navigate
#bind-key -N "Move to prev window" -T prefix       h            previous-window
#bind-key -N "Move to next window" -T prefix       l            next-window
bind-key -N "Move to prev window" -T prefix       C-h          previous-window
bind-key -N "Move to next window" -T prefix       C-l          next-window


## Do not allow tmux to automattically rename the panes
setw -g automatic-rename off
setw -g allow-rename off

## set -g automatic-rename-format
## Rename a pane 
bind-key    -N "Rename current pane"    -T prefix       <  command-prompt -I "#W" { select-pane -T "%%" }
## Rename a session (default)
bind-key    -N "Rename current session" -T prefix       \$ command-prompt -I "#S" { rename-session '%%' }
## Rename a window (default)
#bind-key    -N "Rename current window"  -T prefix       ,  command-prompt -I"#W" { rename-window -- '%%' }
bind-key    -N "Rename current window"  -T prefix       ,  command-prompt -I"#W" { run-shell "/home/vendor_kcroysdal/bin/tools_tmux/rename_window %%" }
#}}

# Colors {{

# Solarized colors {{

                                                  # SOLARIZED HEX     16 TERMCOL  HEX   
## Vim syntax will show the colour                # --------- ------- -- -------  -------- 
set-window-option -g clock-mode-colour colour8    # base03    #002b36  8 brblack   #1c1c1c
set-window-option -g clock-mode-colour colour0    # base02    #073642  0 black     #262626 
set-window-option -g clock-mode-colour colour10   # base01    #586e75 10 brgreen   #4e4e4e 
set-window-option -g clock-mode-colour colour11   # base00    #657b83 11 bryellow  #585858 
set-window-option -g clock-mode-colour colour12   # base0     #839496 12 brblue    #808080 
set-window-option -g clock-mode-colour colour14   # base1     #93a1a1 14 brcyan    #8a8a8a 
set-window-option -g clock-mode-colour colour7    # base2     #eee8d5  7 white     #d7d7af 
set-window-option -g clock-mode-colour colour15   # base3     #fdf6e3 15 brwhite   #ffffd7 
set-window-option -g clock-mode-colour colour13   # violet    #6c71c4 13 brmagenta #5f5faf 
set-window-option -g clock-mode-colour colour4    # blue      #268bd2  4 blue      #0087ff 
set-window-option -g clock-mode-colour colour6    # cyan      #2aa198  6 cyan      #00afaf 
set-window-option -g clock-mode-colour colour2    # green     #859900  2 green     #5f8700 
set-window-option -g clock-mode-colour colour3    # yellow    #b58900  3 yellow    #af8700 
set-window-option -g clock-mode-colour colour9    # orange    #cb4b16  9 brred     #d75f00 
set-window-option -g clock-mode-colour colour5    # magenta   #d33682  5 magenta   #af005f 
set-window-option -g clock-mode-colour colour1    # red       #dc322f  1 red       #d70000 

#}}

# Set inactive/active window styles
# https://stackoverflow.com/questions/25532773/change-background-color-of-active-or-inactive-pane-in-tmux/33553372#33553372


## Defaults
#if '[[ "$THEME" =~ dark ]]' 'source ~/.tmux/dark_status.conf'
set-option -g window-style             'fg=default,dim,bg=default,dim'
set-option -g window-active-style      'fg=default,bg=terminal'
set-option -g pane-border-style        'fg=default,dim,bg=default,dim'
set-option -g pane-active-border-style 'fg=blue,bg=terminal'

# ## Solarized ilight
set-option -g window-style             'fg=colour14,bg=colour7'
# ## Nord
# set-option -g window-style             'fg=colour14,bg=colour8'
# set-option -g window-style             'fg=colour14,bg=#344046 '
set-option -g window-active-style      'fg=colour11,bg=terminal'

# Solarized ilight
set-option -g pane-border-style        'fg=colour12,bg=colour7'
#set-option -g pane-border-style        'fg=colour12,bg=#344046'
set-option -g pane-active-border-style 'fg=blue,bg=terminal'

#set-option -g pane-border-indicators  colour
set-option -g pane-border-lines       single

set-option -g pane-border-status  'bottom'
set -g pane-border-format " P###P #T "
## TODO -- does not auto-update the path
#set-option -g pane-border-format "#h #{pane_current_path}"
#set-option -g pane-border-format "#h"

# Active pane style (highlighted style)
# set-option -g pane-active-border-format "fg=colour12"  # Choose an active color

# pane number display
set-option -g display-panes-active-colour colour2
set-option -g display-panes-colour colour10

# clock
set-window-option -g clock-mode-colour colour2

# Xterm titles. Set to Desktop (Session #)
set-option set-titles on
set-option set-titles-string " Desktop #S  #W"

# }}

# Status bar {{
# "I' == current window index
# 'H' == Hostname
# 'F' == current window flag
# 'P' == current pane index
# 'S' == Session name
# 'T' == current window title
# 'W' == current window name
# '#' == a literal "#"
# Where appropriate, special character sequences may be prefixed with a
# number to specify the maximum length, in this line "#10W'.

set-option -g status-justify right

# Default statusbar colors
# set-option -g status-attr default
set-option -g status-bg colour0
set-option -g status-fg colour6

# status bar
#+--- Bars ---+
set -g status-left "#[fg=black,bg=blue] #S #[fg=blue,bg=black]"
set -g status-left-length 15
set -g status-right-length 50
set -g status-right "#{prefix_highlight}#[fg=brightblack,bg=black,nobold,noitalics,nounderscore]#[fg=white,bg=brightblack] #[fg=white,bg=brightblack,nobold,noitalics,nounderscore]#[fg=white,bg=brightblack] #[fg=cyan,bg=brightblack,nobold,noitalics,nounderscore]#[fg=black,bg=cyan,bold] #(tmux-mem-cpu-load --color --interval 120)"

#+--- Windows ---+
set -g window-status-format "#[fg=black,bg=brightblack,nobold,noitalics,nounderscore] #[fg=white,bg=brightblack]#I #[fg=white,bg=brightblack,nobold,noitalics,nounderscore] #[fg=white,bg=brightblack]#W #F #[fg=brightblack,bg=black,nobold,noitalics,nounderscore]"
set -g window-status-current-format "#[fg=black,bg=cyan,nobold,noitalics,nounderscore] #[fg=black,bg=cyan]#I #[fg=black,bg=cyan,nobold,noitalics,nounderscore] #[fg=black,bg=cyan]#W #F #[fg=cyan,bg=black,nobold,noitalics,nounderscore]"
set -g window-status-separator ""

#+--- tmux-prefix-highlight ---+
set -g @prefix_highlight_output_prefix "#[fg=brightcyan]#[bg=black]#[nobold]#[noitalics]#[nounderscore]#[bg=brightcyan]#[fg=black]"
set -g @prefix_highlight_output_suffix ""
set -g @prefix_highlight_copy_mode_attr "fg=brightcyan,bg=black,bold"

#+--- tmux-prefix-highlight ---+
set -g @prefix_highlight_fg black
set -g @prefix_highlight_bg brightcyan

#+--- Layout ---+
set -g status-justify left

#+--- Colors ---+
set -g status-style bg=black,fg=white

set -g display-panes-colour black
set -g display-panes-active-colour brightblack

#+----------+
#+ Messages +
#+---------+
set -g message-style bg=brightblack,fg=cyan
set -g message-command-style bg=brightblack,fg=cyan
# }}

# }}

# Powerline symbols {{
# echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"
#  let g:airline_left_sep = ''
#  let g:airline_left_alt_sep = ''
#  let g:airline_right_sep = ''
#  let g:airline_right_alt_sep = ''
#  let g:airline_symbols.branch = ''
#  let g:airline_symbols.readonly = ''
#  let g:airline_symbols.linenr = ''
# }}

# Plugins {{
set -g @plugin 'tmux-plugins/tpm'

# # https://github.com/tmux-plugins
# # ~/.tmux/plugins/tmux-continuum/README.md
# set -g @plugin 'tmux-plugins/tmux-continuum'

# # ~/.tmux/plugins/tmux-resurrect/README.md
set -g @plugin 'tmux-plugins/tmux-resurrect'
#
# # ~/.tmux/plugins/tmux-yank/README.md
set -g @plugin 'tmux-plugins/tmux-yank'

# Sets <, >, and \ bindings
set -g @plugin 'tmux-plugins/tmux-menus'

# # ~/.tmux/plugins/tmux-prefix-highlight/README.md
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
# # ~/.tmux/plugins/tmux-sessionist/README.md
# set -g @plugin 'tmux-plugins/tmux-sessionist'
#
set -g @plugin 'sainnhe/tmux-fzf'
set -g @tmux-fzf-launch-key 'C-f'


# set -g @continuum-restore 'off'
# set -g @continuum-save-interval '60'
# set -g @yank_selection '-primary'
#
# #bind-key -Tcopy-mode-vi y send -X copy-pipe "reattach-to-user-namespace pbcopy"\; send -X clear-selection
# #bind-key -Tcopy-mode-vi Enter send -X copy-pipe "reattach-to-user-namespace pbcopy"\; send -X clear-selection
#
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# }}

## Do not Resore session using tmux-resurrect  with Ctrl-space Ctrl-r
unbind c-r

## Override the tmux restore settings
unbind -n C-s
bind C-a setw monitor-activity on
bind C-s setw monitor-silence 120
unbind c-q
unbind space
bind C-q setw monitor-activity off \; setw monitor-silence 0 


## Remove unused bindings
unbind -n M-o

## Menus

set -g @menus_location_x 'C'
set -g @menus_location_y 'C'

# Rename panes
set -s command-alias[10] rename-pane='select-pane -T'
set -s command-alias[11] rp='select-pane -T'

## Alt-Q pop-up of useful commands

# unbind -n M-q
# bind-key M-q display-menu -x W -y S \
#     "New Session"                        S "command-prompt -p \"New Session:\" \"new-session -A -s '%%'\"" \
#     "Kill Session"                       x "kill-session" \
#     "Kill Other Session(s)"              X "kill-session -a" \
#     "" \
#     "New Window"                         ␍ new-window \
#     "Kill Window"                        k "killw"  \
#     "Choose Window"                      w choose-window \
#     "Previous Window"                    🡠 previous-window \
#     "Next Window"                        🡢 next-window \
#     "Swap Window Right"                  ↑ "swap-window -t -1" \
#     "Swap Window Left"                   ↓ "swap-window -t +1" \
#     "Horizontal Split"                   v "split-window -h" \
#     "Vertical Split"                     s "split-window -v"  \
#     "" \
#     "Layout Horizontal"                  h "select-layout even-horizontal"  \
#     "Layout Vertical"                    k "select-layout even-horizontal"  \
#     "" \
#     "Swap Pane Up"                       < "swap-pane -U" \
#     "Swap Pane Down"                     > "swap-pane -D" \
#     "Break Pane"                         ! break-pane \
#     "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
#     "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

## Eqaul windows after split (break vertical splits)
# set-hook -g after-split-window "selectl even-vertical"
#set-hook -g after-split-window ""
# set-hook -g pane-exited "selectl even-vertical"

## Update to only resize pane if not zoomed 2024-05-29 17:00 
#set-hook -g client-resized "selectl even-vertical"
# set-hook -g client-resized ""
#set-hook -g after-split-window ""
 
bind-key C-s split-window -h -c "#{pane_current_path}"
