" Modeline and Notes {{
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={{,}} foldmethod=marker spell:
" }}
"

" Use before config {{
    if filereadable(expand("~/.vim/vimrc.before"))
        source ~/.vim/vimrc.before
    endif
" }}

" Setup Bundle Support 
call plug#begin('~/.vim/autoload/plug.vim')

if filereadable(expand("~/.vim/bundles.vim"))
    source ~/.vim/bundles.vim
endif


" General {{

    set background=dark         " Assume a dark background
    if !has('gui')
        "set term=$TERM          " Make arrow and other keys work
    endif
    filetype plugin indent on   " Automatically detect file types.
    syntax on               " Syntax highlighting
    "set mouse=a                 " Automatically enable mouse usage
    "set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

" }}

" Settings {{

    if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        color solarized             " Load a colorscheme
    endif

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    highlight clear SignColumn      " SignColumn should match background for
                                    " things like vim-gitgutter

    highlight clear LineNr          " Current line number row will have same background color in relative mode.
                                    " Things like vim-gitgutter will match LineNr highlight
    "highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    " Reduce the delay for entering normal mode when pressing escape
    set timeoutlen=100
    set timeoutlen=3000


    let mapleader = ','

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    "set number                          " Line numbers on
    "set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms

    set winminheight=0              " Windows can be 0 line high
    set noinfercase                 " Case insensitive completion
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    "set list
    "set listchars=tab:\ ,trail:,extends:#,nbsp:. " Highlight problematic whitespace
    set undofile

    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current

" }}

" Key (re)Mappings {{

    " Shortcuts
    " Change Working Directory to that of the current file
    " cmap cwd lcd %:p:h
    " cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

" }}

" Settings {{ 

" Look for tags in local directory. If not found, continue looking up.
set tags=tags;/
set tags^=.git/tags

" Disable blinking cursor
"set guicursor+=a:blinkwait0

" Enable spelling check
set spell 
"set number                      " Line numbers on


" Do not use swapfile 
set noswapfile

" Allow filename completion after an equal sign (ie. set var=)
set isfname-==

"""" Windows, Buffers
set swb=useopen,usetab " Allow changing tabs/windows for quickfix/:sb/etc

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on (Use \v for extra magic)
set magic

" No annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set tm=500

set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
"set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
set hidden                          " Allow buffer switching without saving

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off
set nobackup
set nowritebackup
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.

set fileformats=unix

set diffopt=iwhite,filler
set t_kb=

set smartindent		" always set autoindenting on
set viminfo='20,\"0,:50,/50" read/write a .viminfo file, 

" Make 2 line status to prevent "hit-return" message
set cmdheight=2

" Prevents problems in when using a terminal where <Esc> followed 
" by a key (for me 'w') leads to things like inserting <F8>
 set noesckeys 

set textwidth=0

" Cursorline : Off due to syntax performance issues.
set nocursorcolumn
set nocursorline

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Remember info about open buffers on close
set viminfo^=%

set tagrelative

set completeopt=menu,longest

" Automatically insert the current comment leader after hitting 'o' or
" 'O' in Normal mode.
"

" http://www.reddit.com/r/vim/comments/3ae4qf/psa_set_clipboardunnamed/
" does is that the register you use for yanking and pasting when you don't specify 
" one becomes the system clipboard '*'. So when you need to paste something into 
" vim you just select it, switch to vim, press p, done, no indentation mess either.
" But it also works the other way round, you can yank something and paste with middle click in your system. 
" You can also set it to unnamedplus instead which will use the '+' register 
" (On Linux this would be the Ctrl+C/V instead of select/middleclick then). 
" unnamedplus needs X11 support of course. I never tried this but you can also 
" set both, which should yank to both clipboards from vim and paste from the
" clipboard that was used last in the system.


" set clipboard^=unnamed

" Automatically insert the comment after hitting 'o' or 'O' in Normal mode.
"set formatoptions=qol 
" formatoptions=croql
set formatoptions-=cro

" c	Auto-wrap comments using textwidth, inserting the current comment
" 	leader automatically.
" r	Automatically insert the current comment leader after hitting
"	<Enter> in Insert mode.
" o	Automatically insert the current comment leader after hitting 'o' or
" 	'O' in Normal mode.

" Searching options
"set noincsearch                 " Disable incremental search
"set nohlsearch                  " Do not highlight search terms
"set noignorecase                " Case sensitive search

set foldenable                  " Auto fold code

" Map gf to create new files if they don't exist
":map gf :e <cfile><CR>

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Enter drops into command mode
"    TODO 2015/06/16 13:39 Need to disable in correction window
nnoremap <CR> :

" Enable cursor column/line (could slow down vim)
"set cursorcolumn
"set c

" faster GUI performance
set scrolljump=5
set synmaxcol=180 

nnoremap <F4> :bd<CR>

" Backspace toggles between the current file and the previously edited file 
nnoremap <BS> <C-^>
nnoremap <C-H> <C-^>

" Smash the jk instead of hitting Escape
inoremap jk <esc>
inoremap kj <esc>

" Move lines up/down with Ctrl Up/Down arrows
" nmap <ESC>[A <C-Up>
" nmap <ESC>[B <C-Down>
" nnoremap <C-Down> :m .+1<CR>==
" nnoremap <C-j>    :m .+1<CR>==
" nnoremap <C-Up>   :m .-2<CR>==
" nnoremap <C-k>    :m .-2<CR>==

" 2016/02/10 18:48
" https://www.reddit.com/r/vim/comments/451q7x/what_are_some_useful_key_mappings_you_would/
" Cycle through location list
"  nnoremap <silent> <F1> :try<bar>:try<bar>lnext<bar>catch /^Vim\%((\a\+)\)\=:E553/<bar>lfirst<bar>catch/^Vim\%((\a\+)\)\=:E776/<bar>endtry<bar>catch /^Vim\%((\a\+)\)\=:E42/<bar>endtry<cr>
"  nnoremap <silent> <F2> :try<bar>:try<bar>lprev<bar>catch /^Vim\%((\a\+)\)\=:E553/<bar>llast<bar>catch/^Vim\%((\a\+)\)\=:E776/<bar>endtry<bar>catch /^Vim\%((\a\+)\)\=:E42/<bar>endtry<cr>
"
" " similar to gv, reselects the last changed block
" nnoremap gV `[v`]
"
" " make single quote act like backtick, useful when backtick is a dead key
" nnoremap ' `

" Center screen when searching 
" nnoremap n nzz
" nnoremap N Nzz
" nnoremap * *zz
" nnoremap # #zz
" nnoremap g* g*zz
" nnoremap g# g#zz

" Map Control-Space to Control-W to make gvim windows more like tmux
" Does not work with vimwiki
nnoremap <C-Space> <C-W>

" Quickly yank all lines in the file.
nmap <leader>yy :%y+<CR>
" }}

" GUI {{

" Set extra options when running in GUI mode
" Highlight {{
" Popup menu hightLight Group
"highlight link EasyMotionTarget ErrorMsg
"highlight link EasyMotionShade Comment
"highlight Pmenu    ctermbg=13  guibg=DarkBlue
"highlight PmenuSel ctermbg=7   guibg=DarkBlue     guifg=LightBlue
"highlight PmenuSbar ctermbg=7  guibg=DarkGray
"highlight PmenuThumb           guibg=Black
" }}

if has("gui_running")
   "" Only show line numbers in the GUI (easier cut/paste from terminals)
   set number " Display line numbers
   set numberwidth=1 " using only 1 column (and 1 space) while possible
   " set guioptions-=T
   " set guioptions+=e " Use GUI tab label
   " set guitablabel=%M\ %t
   set colorcolumn=80
else 
    set t_Co=256
endif
" }}

" Autocmds {{


" Automatically switch to the current file directory when a new buffer is opened
" augroup autocd
"     autocmd!
"     autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
"     " Always switch to the current file directory
" augroup END

augroup Quickfix
    autocmd!
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
    autocmd FileType    quickfix nnoremap <buffer> <CR> <CR>
    " au FileType qf nnoremap <buffer> <Enter> <Enter>
    autocmd CmdWinEnter * nnoremap <buffer> <cr> <cr>
augroup END

" Color matching parans
" 2015/05/22 14:53 This breaks indent on perl
augroup RainbowParens
"     autocmd! 
"     autocmd FileType perl RainbowParenthesesLoadBraces
"     autocmd FileType perl RainbowParenthesesActivate
"
      autocmd FileType tcl RainbowParenthesesLoadSquare
      autocmd FileType tcl RainbowParenthesesActivate
      nmap <Leader>rp :RainbowParenthesesToggle <CR>
augroup END

augroup Diff
    autocmd BufWritePost * if &diff | diffupdate | endif
augroup END

augroup Filetypes
    autocmd! 
    autocmd BufRead,BufNewFile *.stcl  setfiletype tcl
    autocmd BufRead,BufNewFile *.dctcl setfiletype tcl
    autocmd BufRead,BufNewFile *.vim.* setfiletype vim
    autocmd BufRead,BufNewFile *.md    setfiletype markdown
augroup END

augroup VimFiles
    autocmd! 
    autocmd FileType vim noremap <silent><buffer> <F3> :exec 'source '.bufname('%')<CR>
augroup END

" http://vim.wikia.com/wiki/Jump_to_a_function_from_where_it_is_called
augroup Programming
    autocmd! 
    autocmd FileType perl nmap gx yiw/^\(sub\<Bar>function\)\s\+<C-R>"<CR>

" When starting to edit a file:
"   For *.c and *.h files set formatting of comments and set C-indenting on
"   For other files switch it off
    autocmd BufRead *.c,*.h set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
    " Set tab spacing to 8 and don't expand for Makefiles
    autocmd BufRead Makefile* set noexpandtab tabstop=8 shiftwidth=8
augroup END

augroup Log_files
    autocmd! 
    "autocmd FileChangedShell *.log*  echon "" 
    autocmd FileType log set colorcolumn=0
    autocmd FileType log let g:neocomplete#disable_auto_complete=0
    "autocmd FileType log let g:enable_numbers = 0
augroup END

" Return to last edit position when opening files (You want this!) {{
augroup LastLine
    autocmd!
    autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif
augroup END
" }}

" Enable editing of gzipped files {{
augroup Compressed
    autocmd!
"    read: set binary mode before reading the file
"          uncompress text in buffer after reading
"   write: compress file after writing
"  append: uncompress file, append, compress file
    autocmd BufReadPre,FileReadPre      *.gz set bin
    autocmd BufReadPost,FileReadPost    *.gz '[,']!gunzip
    autocmd BufReadPost,FileReadPost    *.gz set nobin

    autocmd BufWritePost,FileWritePost  *.gz !mv <afile> <afile>:r
    autocmd BufWritePost,FileWritePost  *.gz !gzip <afile>:r

    autocmd FileAppendPre		    *.gz !gunzip <afile>
    autocmd FileAppendPre		    *.gz !mv <afile>:r <afile>
    autocmd FileAppendPost		    *.gz !mv <afile> <afile>:r
    autocmd FileAppendPost		    *.gz !gzip <afile>:r

     "Enable editing of compressed files
    autocmd BufReadPre,FileReadPre      *.Z set bin
    autocmd BufReadPost,FileReadPost    *.Z '[,']!gunzip
    autocmd BufReadPost,FileReadPost    *.Z set nobin

    autocmd BufWritePost,FileWritePost  *.Z !mv <afile> <afile>:r
    autocmd BufWritePost,FileWritePost  *.Z !compress <afile>:r

    autocmd FileAppendPre		    *.Z !uncompress <afile>
    autocmd FileAppendPre		    *.Z !mv <afile>:r <afile>
    autocmd FileAppendPost		    *.Z !mv <afile> <afile>:r
    autocmd FileAppendPost		    *.Z !compress <afile>:r
augroup END
" }}

"}}

" Mappings {{

" Sort visual selection
vmap <Leader>s !sort<CR>
nmap <Leader>sp :s/[, ]/ \\/<CR>

"transpose words, preserving punctuation
nnoremap <silent> gst :s,\v(\w+)(\W*%#\W*)(\w+),\3\2\1,<bar>nohl<CR>
"transpose WORDs, preserving whitespace
nnoremap <silent> gsT :s,\v(\S+)(\s*\S*%#\S*\s*)(\S+),\3\2\1,<bar>nohl<CR>

" Expand %% to current directory
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! from an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Visual mode pressing m will Expands a visual region 
vmap m <Plug>(expand_region_expand)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :nohlsearch<cr>

" Tab navigation {{
" Useful mappings for managing tabs

" leader mappings 
map <leader>tn :tabnew<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<space>
map <leader>tt :tabedit<Space>
" Opens a new tab with the current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" non-leader mappings 
nnoremap tn  :tabnew<CR>
nnoremap tc  :tabclose<CR>
nnoremap tm  :tabmove<Space>
nnoremap tt  :tabedit<Space>

" hjkl to move around tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>

nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i

nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt

" }}

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Smash the jk instead of hitting Escape
inoremap jk <esc>
inoremap kj <esc>

" Search for a vim setting
nnoremap ,fs :verbose set 
nnoremap ,fm :verbose map 

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " When you press gv you vimgrep after the selected text
" vnoremap <silent> gv :call VisualSelection('gv')<CR>
"
" " Open vimgrep and put the cursor in the right position
" map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>
"
" " Vimgreps in the current file
" map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>
"
" " When you press <leader>r you can search and replace the selected text
" vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>


" For building tabs
"map <F11>  :sp tags<CR>:%s/^\([^ :]*:\)\=\([^   ]*\).*/syntax keyword Tag \2/<CR>:wq! tags.vim<CR>/^<CR><F12>
"map <F12>  :so tags.vim<CR>
"

" Remap Q to gq in visual mode to reformat text that is highlighted.
vnoremap Q gq
" Remap Q to gqap in normal mode to reformat text in current paragraph.
nnoremap Q gqap

" Emacs style editing in insert mode
imap <C-A>  <ESC>0i
imap <C-B>  <ESC>hi
imap <C-D>  <ESC>xi
imap <C-E>  <ESC>A
imap <C-F>  <ESC>lli
imap <ESC>b <ESC>bi
imap <ESC>f <ESC>lWi

map <leader>v :source $MYVIMRC<CR>
map <leader>d :diffupdate<CR>

" Paste from the system clipboard with ,p in normal mode
noremap <leader>p "*p

" <space> toggles folds opened and closed
nnoremap <space> za

" <space> in visual mode creates a fold over the marked range"{
vnoremap <space> zf

map  <Delete>   x

"}}

" Plugins {{

" Vimwiki {{

    let wiki_1                  = {}
    let wiki_1.path             = '~/vimwiki/'
    let wiki_1.path_html        = '~/public_html/vimwiki/'

    let wiki_2                  = {}
    let wiki_2.path             = '~/docs/'
    let wiki_2.path_html        = '~/public_html/docs/'
    let wiki_2.template_path    = '~/public_html/docs'
    let wiki_2.template_default = 'default'
    let wiki_2.auto_export      = 1

    let g:vimwiki_list          = [wiki_1, wiki_2]

    " Enable folding of wiki
    "let g:vimwiki_folding='expr'
    " TODO : Add additional paths 
    let g:vimwiki_list_ignore_newline=0
    " Prevents tab from working ?
    let g:vimwiki_table_mappings=0
" }}

" TMUX send {{
" TODO Fix the plugin keys "
" Normal mode -- send current line
noremap <leader>q <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>
noremap <F2>      <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>

" 2017/11/28 11:53 Will this simple code work?
noremap <leader>q V"ryj:call Send_keys_to_Tmux(@r)<CR>
noremap <F2>      V"ryj:call Send_keys_to_Tmux(@r)<CR>

" Visual mode -- send highlight lines 
vnoremap <leader>q "ryj:call Send_keys_to_Tmux(@r)<CR>'>
vnoremap <F2>      "ryj:call Send_keys_to_Tmux(@r)<CR>'>

" nmap <leader>q <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>

" nmap <C-C><C-C> <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>
" nmap <C-C><C-C> <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>
" vmap <C-C><C-C> "ry<Esc>:call Send_keys_to_Tmux(@r)<CR>

" nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <leader><F2> <Plug>SetTmuxVars
" }}

" vim-tmux-navigator {{
" 2017/05/13 13:17 Need to leave the default mappings (C-k, C-j) since these are sent from tmux to vim
" let g:tmux_navigator_no_mappings = 1
nnoremap <M-Left>  :TmuxNavigateLeft<cr>
nnoremap <M-Down>  :TmuxNavigateDown<cr>
nnoremap <M-Up>    :TmuxNavigateUp<cr>
nnoremap <M-Right> :TmuxNavigateRight<cr>
nnoremap <M-/>     :TmuxNavigatePrevious<cr>
" }}

" delimitMate {{
" Enter 2nd paran to close
    let delimitMate_matchpairs = "(:),[:],{:},<:>"
    let delimitMate_jump_expansion = 1
    let delimitMate_balance_matchpairs = 1
    let delimitMate_excluded_regions = "Comment,String"
    let delimitMate_excluded_ft = "mail,txt"
    augroup delimitMate
        autocmd!
        autocmd FileType vim,html let b:delimitMate_matchpairs = "(:),[:],{:},<:>"
        autocmd FileType c,perl let b:delimitMate_eol_marker = ";"
    augroup END
" }}

" Unite  {{
let g:unite_source_history_yank_enable = 1
let g:unite_enable_start_insert=1
call unite#filters#sorter_default#use(['sorter_rank'])

" Impact normal C-r
"inoremap <silent> <C-r> <esc>:<C-u>Unite register
            "\ -buffer-name=register -no-start-insert <CR>

inoremap <silent> <C-y> <esc>:<C-u>Unite history/yank
         \ -buffer-name=yank     -no-start-insert           <CR>
nnoremap <silent> gr :<C-u>Unite register
         \ -buffer-name=register                            <CR>
nnoremap <silent> gc :<C-u>Unite file
         \ -buffer-name=file -no-start-insert -resume       <CR>
nnoremap <silent> gb :<C-u>Unite buffer
         \ -buffer-name=buffer -no-start-insert -resume     <CR>
nnoremap <silent> gF :<C-u>Unite file_rec/async
         \ -buffer-name=file_rec   -resume                  <CR>
nnoremap <silent> gm :<C-u>Unite mapping
         \ -buffer-name=mapping                             <CR>
nnoremap <silent> ge :<C-u>Unite output:message             <CR>
nnoremap <silent> gy :<C-u>Unite history/yank
         \ -buffer-name=yank    -no-start-insert            <CR>
nnoremap <silent> g/ :<C-u>Unite grep:.
         \ -buffer-name=search -auto-resize                 <CR>
nnoremap <silent> gl :<C-u>Unite line
         \ -buffer-name=line   -auto-resize -resume         <CR>
nnoremap <silent> g? :<C-u>Unite line
         \ -buffer-name=line   -auto-resize -resume         <CR>

nnoremap <silent> gA :<C-u>UniteBookmarkAdd                <CR>
nnoremap <silent> gB :<C-u>Unite bookmark -no-start-insert <CR>
nnoremap <silent> gC :<C-u>Unite command                   <CR>
nnoremap <silent> gR :<C-u>UniteResume
         \ -no-start-insert -no-start-insert                <CR>

""	nnoremap  [unite]f  :<C-u>Unite source<CR>
nnoremap <silent> gs
        \ :<C-u>Unite -buffer-name=files -no-split
        \ jump_point file_point buffer_tab
        \ file_rec:! file file/new<CR>

"nnoremap <leader>t  :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
"nnoremap <Leader>um :<C-u>Unite -no-split -buffer-name=mappings -auto-resize mapping<CR>
"nnoremap <Leader>uf :<C-u>Unite -no-split -buffer-name=function -auto-resize function<CR>
"nnoremap <Leader>ur :<C-u>Unite -no-split -buffer-name=runtimepath -auto-resize runtimepath<CR>
"nnoremap <silent> [unite]p  :<C-u>Unite phrase -start-insert<CR>

" Set mappings for the Unite windows
function! s:unite_settings()
	nmap <buffer> Q <plug>(unite_exit)
	nmap <buffer> <esc> <plug>(unite_exit)
	nmap <buffer> <C-c> <plug>(unite_exit)
	imap <buffer> <C-c> <plug>(unite_exit)
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    imap <silent><buffer><expr> <C-s> unite#do_action('split')
    imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
    nmap <silent><buffer><expr> <C-s> unite#do_action('split')
    nmap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    nmap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
endfunction
augroup unite
    autocmd!
    autocmd FileType unite call s:unite_settings()
augroup END

if executable('ag')
	let g:unite_source_grep_command='ag'
	let g:unite_source_grep_default_opts='--nocolor --nogroup --hidden'
	let g:unite_source_grep_recursive_opt=''
elseif executable('ack')
	let g:unite_source_grep_command='ack'
	let g:unite_source_grep_default_opts='--no-heading --no-color'
	let g:unite_source_grep_recursive_opt=''
endif
" }}

" Tabularize {{
    " Expand T to Tabularize in visual mode
    cabbrev '<,'>T '<,'>Tabularize
    vmap T :Tabularize /

    vmap <Leader>as     :Tabularize /\zs\s/l1c0<CR>
    nmap <Leader>as     :Tabularize /\zs\s/l1c0<CR>
    nmap <Leader>a&     :Tabularize /&<CR>
    vmap <Leader>a&     :Tabularize /&<CR>
    nmap <Leader>a=     :Tabularize /=<CR>
    vmap <Leader>a=     :Tabularize /=<CR>
    nmap <Leader>a:     :Tabularize /:<CR>
    vmap <Leader>a:     :Tabularize /:<CR>
    nmap <Leader>a::    :Tabularize /:\zs<CR>
    vmap <Leader>a::    :Tabularize /:\zs<CR>
    nmap <Leader>a,     :Tabularize /,<CR>
    vmap <Leader>a,     :Tabularize /,<CR>
    nmap <Leader>a,,    :Tabularize /,\zs<CR>
    vmap <Leader>a,,    :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" }}

" Fugitive {{
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>:GitGutter<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>:GitGutter<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    nnoremap <silent> <leader>gg :GitGutterToggle<CR>
"}}

" Flagship {{
" set guioptions-=e
"let g:tabprefix = '%{flagship#id()}'
"let g:tablabel = "%N%{flagship#tabmodified()} %{flagship#tabcwds('shorten',',')}"
" }}

" Dispatch {{
autocmd FileType perl let b:dispatch = 'perl -Wc %'
" }}

" Session {{
let g:session_autosave='yes'
let g:session_persist_font = 0
let g:session_persist_colors = 0

" }}

" Multiple cursors {{
function! Multiple_cursors_before()
    exe 'NeoCompleteLock'
    echo 'Disabled autocomplete'
endfunction

function! Multiple_cursors_after()
    exe 'NeoCompleteUnlock'
    echo 'Enabled autocomplete'
endfunction
" }}

" tmux send {{
" TODO Fix the plugin keys "


" vmap <leader>q <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>
" vmap <leader>q <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>
" nmap <leader>q <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>
nmap <leader>q <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>
nmap <F2>      <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>

" Visual mode -- send highlight lines 
vmap <leader>q "ry<Esc>:call Send_keys_to_Tmux(@r)<CR>'>
vmap <F2>      "ry<Esc>:call Send_keys_to_Tmux(@r)<CR>'>
" nmap <C-C><C-C> <Esc>"ryy<Esc>:call Send_keys_to_Tmux(@r)<CR>
" nmap <C-C><C-C> <Esc>^V/[^\\]$<CR>"ry<Esc>//e+1<CR>:call Send_keys_to_Tmux(@r)<CR>
" vmap <C-C><C-C> "ry<Esc>:call Send_keys_to_Tmux(@r)<CR>

" nmap <C-c><C-c> <Plug>NormalModeSendToTmux
" nmap <leader>r <Plug>SetTmuxVars

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

"}}

" Splitjoin {{
    nmap cS :SplitjoinSplit<cr>
    nmap cJ :SplitjoinJoin<cr>
"}}

" Ctrlp  {{
"let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
                        "\ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir']
let g:ctrlp_extensions = ['mixed', 'dir', 'bookmarkdir', 'line', 'changes', 'tag', 'quickfix' ]
let g:ctrlp_buftag_ctags_bin="/usr/bin/ctags" 
let g:ctrlp_buftag_types = { 'tcl'     : '--language-force=tcl', 'perl'     : '--language-force=perl' }
let g:ctrlp_mruf_exclude = '/tmp/.*|RCS/.*,v'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:15,results:30'
let g:ctrlp_switch_buffer = 'et'

nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>c :CtrlPChange<CR>
nnoremap <leader>T :CtrlPBufTag<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>F :CtrlPCurWD<CR>
nnoremap <leader>m :CtrlPMRUFiles<CR>
nnoremap <leader>M :CtrlPMixed<CR>
nnoremap <leader>l :CtrlPLine<CR>

"  let g:ctrlp_abbrev = {
"     \ 'gmode': 'i',
"     \ 'abbrevs': [
"       \ {
"         \ 'pattern': '^cdvim',
"         \ 'expanded': '@cd $HOME/.vim',
"         \ 'mode': 'pfrz',
"       \ },
"       \ {
"         \ 'pattern': '^fvwm',
"         \ 'expanded': '@cd $HOME/.fvwm',
"         \ 'mode': 'pfrz',
"       \ },
"       \ {
"         \ 'pattern': '^tcl',
"         \ 'expanded': '@cd $HOME/tcl',
"         \ 'mode': 'pfrz',
"       \ },
"       \ {
"         \ 'pattern': '^bin',
"         \ 'expanded': '@cd $HOME/bin',
"         \ 'mode': 'pfrz',
"       \ },
"       \ {
"         \ 'pattern': '^home',
"         \ 'expanded': '@cd $HOME',
"         \ 'mode': 'pfrz',
"       \ },
"       \ ],
"     \ }

if executable('ag')
	let g:unite_source_grep_command='ag'
	let g:unite_source_grep_default_opts='--nocolor --nogroup --hidden'
	let g:unite_source_grep_recursive_opt=''
elseif executable('ack')
	let g:unite_source_grep_command='ack'
	let g:unite_source_grep_default_opts='--no-heading --no-color'
	let g:unite_source_grep_recursive_opt=''
endif


" }}

" tagbar  {{
let g:tagbar_ctags_bin="/usr/bin/ctags"
let g:tagbar_show_linenumbers=1
nmap ,tb :TagbarToggle<CR>
" {short}:{long}[:{fold}[:{stl}]]
let g:tagbar_type_log = {
        \ 'ctagstype' : 'log',
        \ 'kinds'     : [
            \ 'c:Section:1:0',
            \ 'r:Errors:1:0',
            \ 'p:DRVs:1:0'
        \ ],
    \ }
"ctags --fields=+iaS --extra=+q
        "\ 'sro'        : '.',
        "\ 'ctagsargs'    :  '-f - --format=2 --excmd=pattern --fields=+inksSa --extra=+q --sort=no',
            "\ 'kind2scope' : {
                "\ 'c' : 'Section',
                "\ 'r' : 'Errors',
            "\ },
            "\ 'scope2kind' : {
                "\ 'c' : 'Section',
                "\ 'r' : 'Errors',
            "\ },


" }}

" neocomplcache / neocomplete {{
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_enable_smart_case  = 1

let g:deoplete#enable_at_startup = 1
let g:deocomplete#sources#syntax#min_keyword_length = 5
let g:deocomplete#enable_smart_case  = 1

let g:neocomplete#enable_auto_select = 0
let g:neocomplete#enable_smart_case  = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 5
let g:neocomplete#cursor_hold_i_time = 200
let g:neocomplete#max_list = 30

"let g:neocomplete#force_overwrite_completefunc = 0

" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'tcsh' : $HOME.'/.history',
"     \ 'tcl' : '~/.vim/syntax/snps.dict'
"         \ }

"let g:neocomplete#keyword_patterns['tcl'] = '-?\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Plugin key-mappings.
inoremap <expr><C-g>     deocomplete#undo_completion()
inoremap <expr><C-l>     deocomplete#complete_common_string()

" inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Enable snipMate compatibility feature.
" let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

let g:snips_author = 'Kevin Croysdale <croysdle@gmail.com>'
"let g:neosnippet#snippets_directory='~/.vim/snippets'
"let g:neosnippet#disable_runtime_snippets = { "_": 1, }
" }}

" " Ultisnip {{
" " <Ctrl><CR> to select a snippet (Only works in GUI)
" let g:UltiSnipsExpandTrigger="<C-CR>"{{
" let g:UltiSnipsJumpForwardTrigger="<C-tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"}}
" let g:UltiSnipsEditSplit="horizontal"
"
" " Use <F12> to load list of all Ulti-snippets
" function! UltiSnipsCallUnite()
"     Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
"     return ''
" endfunction
" inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
" nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
" " }}

" indent-guides {{
" Toggle indent-guides with 'ig'
let g:indent_guides_guide_size            = 4
let g:indent_guides_start_level           = 1
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_color_change_percent  = 1
" }}

" Gundo {{
nnoremap <leader>gu :GundoToggle<CR>
" }}

" vim-airline {{
" https://github.com/bling/vim-airline

let g:airline#extensions#tabline#enabled = 1
"let g:airline_detect_paste=0
"let g:airline#extensions#ctrlp#show_adjacent_modes = 1

set laststatus=2


let g:airline_exclude_preview = 0

let g:airline_powerline_fonts = 1

let g:airline_theme='angr'

let g:airline#extensions#ale#enabled = 1
" }}

" delimitMate {{
" Enter 2nd paran to close
    let delimitMate_matchpairs = "(:),[:],{:},<:>"
    autocmd FileType vim,html let b:delimitMate_matchpairs = "(:),[:],{:},<:>"
    let delimitMate_jump_expansion = 1
    let delimitMate_balance_matchpairs = 1
    let delimitMate_excluded_regions = "Comment,String"
    let delimitMate_excluded_ft = "mail,txt"
    augroup delimitMate
        au FileType c,perl let b:delimitMate_eol_marker = ";"
    augroup END
" }}
"
let g:UltiSnipsExpandTrigger="<C-CR>"
let g:UltiSnipsJumpForwardTrigger="<C-tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="horizontal"


" perl support {{
" -------------
"let g:Perl_Debugger = 'ptkdb'
" let g:Perl_XtermDefaults = "-fa monospace -fs 10 -geometry 80x60"
" }}
"

" Bundle  "Lokaltog/vim-easymotion"
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" Gif config
" map  / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)

" Gif config
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

let g:EasyMotion_smartcase = 1

" Vdebug {{
" -------

let user=(expand('$USER'))
let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : 'localhost',
    \    "timeout" : 40,
    \    "on_close" : 'stop',
    \    "break_on_open" : 1,
    \    "path_maps" : {},
    \    "debug_window_level" : 1,
    \    "debug_file_level" : 1,
    \    "debug_file" : "./vdebug.log",
    \    "watch_window_style" : 'expanded',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾'
    \}

"" Vdebug options
autocmd BufRead,BufNewFile DebuggerWatch setfiletype debugger_watch
autocmd BufRead,BufNewFile DebuggerStack setfiletype debugger_stack
autocmd BufRead,BufNewFile DebuggerStatus setfiletype debugger_status
" }}

" vimux {{
nnoremap <Leader>X :call VimuxRunCommand("clear; " . "python bufname("%")")<CR>
" }}

" }} End of Plugins

" Functions {{

"{{ Delete file
function! DeleteFile(...)
  if(exists('a:1'))
    let theFile=a:1
  elseif ( &ft == 'help' )
    echohl Error
    echo "Cannot delete a help buffer!"
    echohl None
    return -1
  else
    let theFile=expand('%:p')
  endif
  let delStatus=delete(theFile)
  if(delStatus == 0)
    echo "Deleted " . theFile
  else
    echohl WarningMsg
    echo "Failed to delete " . theFile
    echohl None
  endif
  return delStatus
endfunction
"delete the current file
com! Rm call DeleteFile()
"delete the file and quit the buffer (quits vim if this was the last file)
com! RM call DeleteFile() <Bar> q!
"}}

"{{ DeleteInactiveBufs
function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()
"}}

"{{ CmdLine
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction
"}}

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.tcl :call DeleteTrailingWS()

" }}
